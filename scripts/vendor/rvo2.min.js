/*
Copyright (C) 2008-10 University of North Carolina at Chapel Hill.
All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for educational, research, and non-profit purposes, without fee,
and without a written agreement is hereby granted, provided that the above
copyright notice, this paragraph, and the following four paragraphs appear in
all copies.

Permission to incorporate this software into commercial products may be obtained
by contacting the University of North Carolina at Chapel Hill.

This software program and documentation are copyrighted by the University of
North Carolina at Chapel Hill. The software program and documentation are
supplied "as is", without any accompanying services from the University of North
Carolina at Chapel Hill or the authors. The University of North Carolina at
Chapel Hill and the authors do not warrant that the operation of the program
will be uninterrupted or error-free. The end-user understands that the program
was developed for research purposes and is advised not to rely exclusively on
the program for any reason.

IN NO EVENT SHALL THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL OR ITS
EMPLOYEES OR THE AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE
USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF NORTH
CAROLINA AT CHAPEL HILL OR THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL AND THE AUTHORS SPECIFICALLY
DISCLAIM ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY STATUTORY
WARRANTY OF NON-INFRINGEMENT. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS"
BASIS, AND THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL AND THE AUTHORS HAVE
NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
MODIFICATIONS.
*/

var RVO=RVO||{};RVO.Agent=function(a){this.sim=a;this.agentNeighbors=[];this.maxNeighbors=0;this.maxSpeed=0;this.neighborDist=0;this.newVelocity=[0,0];this.obstacleNeighbors=[];this.orcaLines=[];this.position=[0,0];this.sim=a;this.timeHorizon=0;this.timeHorizonObst=0;this.velocity=[0,0];this.id=0};RVO.Agent.prototype.computeNeighbors=function(){this.obstacleNeighbors=[];var a=RVO.sqr(this.timeHorizonObst*this.maxSpeed+this.radius);this.sim.kdTree.computeObstacleNeighbors(this,a);this.agentNeighbors=[];if(this.maxNeighbors>0){a=RVO.sqr(this.neighborDist);this.sim.kdTree.computeAgentNeighbors(this,a)}};RVO.Agent.prototype.computeNewVelocity=function(){this.orcaLines=[];var af=1/this.timeHorizonObst;for(var ac=0,y=this.obstacleNeighbors.length;ac<y;++ac){var M=this.obstacleNeighbors[ac][1],N=M.nextObstacle,z=RVO.Vector.subtract(M.point,this.position),C=RVO.Vector.subtract(N.point,this.position),q=false;for(var aa=0,ab=this.orcaLines.length;aa<ab;++aa){if(RVO.Vector.det(RVO.Vector.multiply(RVO.Vector.subtract(z,this.orcaLines[aa][0]),af),this.orcaLines[aa][1])-af*this.radius>=-RVO.EPSILON&&RVO.Vector.det(RVO.Vector.multiply(RVO.Vector.subtract(C,this.orcaLines[aa][0]),af),this.orcaLines[aa][1])-af*this.radius>=-RVO.EPSILON){q=true;break}}if(q){continue}var H=RVO.Vector.absSq(z),F=RVO.Vector.absSq(C),B=RVO.sqr(this.radius),Y=RVO.Vector.subtract(N.point,M.point),V=RVO.Vector.dotProduct(RVO.Vector.invert(z),Y)/RVO.Vector.absSq(Y),R=RVO.Vector.absSq(RVO.Vector.subtract(RVO.Vector.invert(z),RVO.Vector.multiply(Y,V))),l=new Array(2);if(V<0&&H<=B){if(M.isConvex){l[0]=[0,0];l[1]=RVO.Vector.normalize([-z[1],z[0]]);this.orcaLines.push(l)}continue}else{if(V>1&&F<=B){if(N.isConvex&&RVO.Vector.det(C,N.unitDir)>=0){l[0]=[0,0];l[1]=RVO.Vector.normalize([-C[1],C[0]]);this.orcaLines.push(l)}continue}else{if(V>=0&&V<1&&R<=B){l[0]=[0,0];l[1]=RVO.Vector.invert(M.unitDir);this.orcaLines.push(l);continue}}}var o,a;if(V<0&&R<=B){if(!M.isConvex){continue}N=M;var D=Math.sqrt(H-B);o=RVO.Vector.divide([z[0]*D-z[1]*this.radius,z[0]*this.radius+z[1]*D],H);a=RVO.Vector.divide([z[0]*D-z[1]*this.radius,-z[0]*this.radius+z[1]*D],H)}else{if(V>1&&R<=B){if(!N.isConvex){continue}M=N;var A=Math.sqrt(F-B);o=RVO.Vector.divide([C[0]*A-C[1]*this.radius,C[0]*this.radius+C[1]*A],F);a=RVO.Vector.divide([C[0]*A-C[1]*this.radius,-C[0]*this.radius+C[1]*A],F)}else{if(M.isConvex){D=Math.sqrt(H-B);o=RVO.Vector.divide([z[0]*D-z[1]*this.radius,z[0]*this.radius+z[1]*D],H)}else{o=RVO.Vector.invert(M.unitDir)}if(N.isConvex){A=Math.sqrt(F-B);a=RVO.Vector.divide([C[0]*A-C[1]*this.radius,-C[0]*this.radius+C[1]*A],F)}else{a=M.unitDir}}}var U=M.prevObstacle,h=false,G=false;if(M.isConvex&&RVO.Vector.det(o,RVO.Vector.invert(U.unitDir))>=0){o=RVO.Vector.invert(U.unitDir);h=true}if(N.isConvex&&RVO.Vector.det(a,N.unitDir)<=0){a=RVO.Vector.invert(N.unitDir);G=true}var L=RVO.Vector.multiply(RVO.Vector.subtract(M.point,this.position),af),e=RVO.Vector.multiply(RVO.Vector.subtract(N.point,this.position),af),c=RVO.Vector.subtract(e,L),T=(M==N)?0.5:RVO.Vector.dotProduct(RVO.Vector.subtract(this.velocity,L),c)/RVO.Vector.absSq(c),m=RVO.Vector.dotProduct(RVO.Vector.subtract(this.velocity,L),o),E=RVO.Vector.dotProduct(RVO.Vector.subtract(this.velocity,e),a);if((T<0&&m<0)||(M==N&&m<0&&E<0)){var k=RVO.Vector.normalize(RVO.Vector.subtract(this.velocity,L));l[1]=[k[1],-k[0]];l[0]=RVO.Vector.add(RVO.Vector.multiply(k,this.radius*af),L);this.orcaLines.push(l);continue}else{if(T>1&&E<0){var k=RVO.Vector.normalize(RVO.Vector.subtract(this.velocity,e));l[1]=[k[1],-k[0]];l[0]=RVO.Vector.add(RVO.Vector.multiply(k,this.radius*af),e);this.orcaLines.push(l);continue}}var P=(T<0||T>1||M==N)?Infinity:RVO.Vector.absSq(RVO.Vector.subtract(this.velocity,RVO.Vector.add(L,RVO.Vector.multiply(c,T)))),K=m<0?Infinity:RVO.Vector.absSq(RVO.Vector.subtract(this.velocity,RVO.Vector.add(L,RVO.Vector.multiply(o,m)))),p=E<0?Infinity:RVO.Vector.absSq(RVO.Vector.subtract(this.velocity,RVO.Vector.add(e,RVO.Vector.multiply(a,E))));if(P<=K&&P<=p){l[1]=RVO.Vector.invert(M.unitDir);l[0]=RVO.Vector.add(L,RVO.Vector.multiply([-l[1][1],l[1][0]],this.radius*af));this.orcaLines.push(l);continue}else{if(K<=p){if(h){continue}l[1]=o;l[0]=RVO.Vector.add(L,RVO.Vector.multiply([-l[1][1],l[1][0]],this.radiuis*af));this.orcaLines.push(l);continue}else{if(G){continue}l[1]=RVO.Vector.invert(a);l[0]=RVO.Vector.add(e,RVO.Vector.multiply([l[1][1],l[1][0]],this.radius*af));this.orcaLines.push(l);continue}}}var Z=this.orcaLines.length,ae=1/this.timeHorizon;for(var ac=0,r=this.agentNeighbors.length;ac<r;++ac){var b=this.agentNeighbors[ac][1],g=RVO.Vector.subtract(b.position,this.position),n=RVO.Vector.subtract(this.velocity,b.velocity),I=RVO.Vector.absSq(g),J=this.radius+b.radius,v=RVO.sqr(J),l=new Array(2);if(I>v){var O=RVO.Vector.subtract(n,RVO.Vector.multiply(g,ae)),S=RVO.Vector.absSq(O),X=RVO.Vector.dotProduct(O,g);if(X<0&&RVO.sqr(X)>v*S){var f=Math.sqrt(S),k=RVO.Vector.divide(O,f),Q=RVO.Vector.multiply(k,J*ae-f);l[1]=[k[1],-k[0]]}else{var x=Math.sqrt(I-J);if(RVO.Vector.det(g,O)>0){l[1]=RVO.Vector.divide([g[0]*x-g[1]*J,g[0]*J+g[1]*x],I)}else{l[1]=RVO.Vector.divide(RVO.Vector.invert([g[0]*x-g[1]*J,g[0]*J+g[1]*x]),I)}var W=RVO.Vector.dotProduct(n,l[1]),Q=RVO.Vector.multiply(RVO.Vector.subtract(l[1],n),W)}}else{var d=1/this.sim.timeStep,O=RVO.Vector.subtract(n,RVO.Vector.multiply(g,d)),f=RVO.Vector.abs(O),k=RVO.Vector.divide(O,f),Q=RVO.Vector.multiply(k,J*d-f);l[1]=[k[1],-k[0]]}l[0]=RVO.Vector.add(this.velocity,RVO.Vector.multiply(Q,0.5));this.orcaLines.push(l)}var ad=RVO.Agent.linearProgram2(this.orcaLines,this.maxSpeed,this.prefVelocity,false,this.newVelocity);if(ad<this.orcaLines.length){RVO.Agent.linearProgram3(this.orcaLines,Z,ad,this.maxSpeed,this.newVelocity)}};RVO.Agent.prototype.insertAgentNeighbor=function(c,d){if(this!=c){var a=RVO.Vector.absSq(RVO.Vector.subtract(this.position,c.position));if(a<d){if(this.agentNeighbors.length<this.maxNeighbors){this.agentNeighbors.push([a,c])}var b=this.agentNeighbors.length-1;while(b!=0&&a<this.agentNeighbors[b-1][0]){this.agentNeighbors[b]=this.agentNeighbors[b-1];--b}this.agentNeighbors[b]=[a,c];if(this.agentNeighbors.length==this.maxNeighbors){var d=this.agentNeighbors[this.agentNeighbors.length-1][0]}}}return d};RVO.Agent.prototype.insertObstacleNeighbor=function(c,d){var e=c.nextObstacle,a=RVO.Vector.distSqPointLineSegment(c.point,e.point,this.position);if(a<d){this.obstacleNeighbors.push([a,c]);var b=this.obstacleNeighbors.length-1;while(b!=0&&a<this.obstacleNeighbors[b-1][0]){this.obstacleNeighbors[b]=this.obstacleNeighbors[b-1];--b}this.obstacleNeighbors[b]=[a,c]}};RVO.Agent.prototype.update=function(){this.velocity=this.newVelocity;RVO.Vector.shift(this.position,RVO.Vector.multiply(this.velocity,this.sim.timeStep))};RVO.Agent.linearProgram1=function(p,f,c,e,l,k){var o=RVO.Vector.dotProduct(p[f][0],p[f][1]),m=RVO.sqr(o)+RVO.sqr(c)-RVO.Vector.absSq(p[f][0]);if(m<0){return false}var b=Math.sqrt(m),j=-o-b,h=-o+b;for(var d=0;d<f;++d){var g=RVO.Vector.det(p[f][1],p[d][1]),a=RVO.Vector.det(p[d][1],RVO.Vector.subtract(p[f][0],p[d][0]));if(Math.abs(g)<=RVO.EPSILON){if(a<0){return false}else{continue}}var n=a/g;if(g>0){h=Math.min(h,n)}else{j=Math.max(j,n)}if(j>h){return false}}if(l){if(RVO.Vector.dotProduct(e,p[f][1])>0){RVO.Vector.set(k,RVO.Vector.add(p[f][0],RVO.Vector.multiply(p[f][1],h)))}else{RVO.Vector.set(k,RVO.Vector.add(p[f][0],RVO.Vector.multiply(p[f][1],j)))}}else{n=RVO.Vector.dotProduct(p[f][1],RVO.Vector.subtract(e,p[f][0]));if(n<j){RVO.Vector.set(k,RVO.Vector.add(p[f][0],RVO.Vector.multiply(p[f][1],j)))}else{if(n>h){RVO.Vector.set(k,RVO.Vector.add(p[f][0],RVO.Vector.multiply(p[f][1],h)))}else{RVO.Vector.set(k,RVO.Vector.add(p[f][0],RVO.Vector.multiply(p[f][1],n)))}}}return true};RVO.Agent.linearProgram2=function(c,h,f,b,g){if(b){RVO.Vector.set(g,RVO.Vector.multiply(f,h))}else{if(RVO.Vector.absSq(f)>RVO.sqr(h)){RVO.Vector.set(g,RVO.Vector.multiply(RVO.Vector.normalize(f),h))}else{RVO.Vector.set(g,f)}}for(var e=0,a=c.length;e<a;++e){if(RVO.Vector.det(c[e][1],RVO.Vector.subtract(c[e][0],g))>0){var d=g.slice();if(!RVO.Agent.linearProgram1(c,e,h,f,b,g)){RVO.Vector.set(g,d);return e}}}return c.length};RVO.Agent.linearProgram3=function(o,m,g,b,k){var a=0;for(var e=g,f=o.length;e<f;++e){if(RVO.Vector.det(o[e][1],RVO.Vector.subtract(o[e][0],k))>a){var c=o.slice(0,m);for(var d=m;d<e;++d){var n=new Array(2),h=RVO.Vector.det(o[e][1],o[d][1]);if(Math.abs(h)<=RVO.EPSILON){if(RVO.Vector.dotProduct(o[e][1],o[d][1])>0){continue}else{n[0]=RVO.Vector.multiply(RVO.Vector.add(o[e][0],o[d][0]),0.5)}}else{n[0]=RVO.Vector.add(o[e][0],RVO.Vector.multiply(o[e][1],RVO.Vector.det(o[d][1],RVO.Vector.subtract(o[e][0],o[d][0]))/h))}n[1]=RVO.Vector.normalize(RVO.Vector.subtract(o[d][1],o[e][1]));c.push(n)}var l=k.slice();if(RVO.Agent.linearProgram2(c,b,[-o[e][1][1],o[e][1][0]],true,k)<c.length){RVO.Vector.set(k,l)}a=RVO.Vector.det(o[e][1],RVO.Vector.subtract(o[e][0],k))}}};var RVO=RVO||{};RVO.KdTree=function(a){this.sim=a;this.agents=[];this.agentTree=[];this.obstacleTree=0};RVO.KdTree.MAX_LEAF_SIZE=10;RVO.KdTree.prototype.buildAgentTree=function(){if(this.agents.length<this.sim.agents.length){for(var b=this.agents.length,a=this.sim.agents.length;b<a;++b){this.agents.push(this.sim.agents[b])}}this.agentTree=[];if(this.agents.length){this.buildAgentTreeRecursive(0,this.agents.length,0)}};RVO.KdTree.prototype.buildAgentTreeRecursive=function(a,e,b){var f=this.agentTree[b]=new RVO.KdTree.AgentTreeNode;f.begin=a;f.end=e;f.minX=f.maxX=this.agents[a].position[0];f.minY=f.maxY=this.agents[a].position[1];for(var h=a+1;h<e;++h){f.maxX=Math.max(f.maxX,this.agents[h].position[0]);f.minX=Math.min(f.minX,this.agents[h].position[0]);f.maxY=Math.max(f.maxY,this.agents[h].position[1]);f.minY=Math.min(f.minY,this.agents[h].position[1])}if(e-a>RVO.KdTree.MAX_LEAF_SIZE){var j=f.maxX-f.minX>f.maxY-f.minY,d=j?0.5*(f.maxX+f.minX):0.5*(f.maxY+f.minY),c=a,l=e-1;while(true){while(c<=l&&(j?this.agents[c].position[0]:this.agents[c].position[1])<d){++c}while(l>=c&&(j?this.agents[l].position[0]:this.agents[l].position[1])>=d){--l}if(c>l){break}else{var g=this.agents[l];this.agents[l]=this.agents[c];this.agents[c]=g;++c;--l}}var k=c-a;if(k==0){++k;++c;++l}f.left=b+1;f.right=b+1+(2*k-1);this.buildAgentTreeRecursive(a,c,f.left);this.buildAgentTreeRecursive(c,e,f.right)}};RVO.KdTree.prototype.buildObstacleTree=function(){var b=[];for(var c=0,a=this.sim.obstacles.length;c<a;++c){b[c]=this.sim.obstacles[c]}this.obstacleTree=this.buildObstacleTreeRecursive(b)};RVO.KdTree.prototype.buildObstacleTreeRecursive=function(l){if(!l.length){return 0}else{var n=new RVO.KdTree.ObstacleTreeNode,b=0,d=l.length,m=d,q=d;for(var p=0;p<d;++p){var s=0,e=0,v=l[p],w=v.nextObstacle;for(var o=0;o<d;++o){if(p!=o){var g=l[o],k=g.nextObstacle,a=RVO.Vector.leftOf(v.point,w.point,g.point),y=RVO.Vector.leftOf(v.point,w.point,k.point);if(a>=-RVO.EPSILON&&y>=-RVO.EPSILON){++s}else{if(a<=RVO.EPSILON&&y<=RVO.EPSILON){++e}else{++s;++e}}if(Math.max(s,e)>=Math.min(m,q)||Math.min(s,e)>=Math.min(m,q)){break}}}if(Math.max(s,e)<Math.max(m,q)||Math.min(s,e)<Math.min(m,q)){m=s;q=e;b=p}}var x=[],f=[],p=b,v=l[p],w=v.nextObstacle;for(var o=0,r=l.length;o<r;++o){if(p!=o){var g=l[o],k=g.nextObstacle,a=RVO.Vector.leftOf(v.point,w.point,g.point),y=RVO.Vector.leftOf(v.point,w.point,k.point);if(a>=-RVO.EPSILON&&y>=-RVO.EPSILON){x.push(l[o])}else{if(a<=RVO.EPSILON&&y<=RVO.EPSILON){f.push(l[o])}else{var h=RVO.Vector.det(RVO.Vector.subtract(w.point,v.point),RVO.Vector.subtract(g.point,v.point))/RVO.Vector.det(RVO.Vector.subtract(w.point,v.point),RVO.Vector.subtract(g.point,k.point)),c=RVO.Vector.add(RVO.Vector.multiply(RVO.Vector.subtract(g.point,k.point),h),g.point),u=new RVO.Obstacle();u.point=c;u.prevObstacle=g;u.nextObstacle=k;u.isConvex=true;u.unitTDir=g.unitDir;u.id=this.sim.obstacles.length;this.sim.obstacles.push(u);g.nextObstacle=u;k.prevObstacle=u;if(a>0){x.push(g);f.push(u)}else{f.push(g);x.push(u)}}}}}n.obstacle=v;n.left=this.buildObstacleTreeRecursive(x);n.right=this.buildObstacleTreeRecursive(f);return n}};RVO.KdTree.prototype.computeAgentNeighbors=function(a,b){this.queryAgentTreeRecursive(a,b,0)};RVO.KdTree.prototype.computeObstacleNeighbors=function(a,b){this.queryObstacleTreeRecursive(a,b,this.obstacleTree)};RVO.KdTree.prototype.queryAgentTreeRecursive=function(c,d,b){var a=this.agentTree[b],e=d;if(a.end-a.begin<=RVO.KdTree.MAX_LEAF_SIZE){for(var f=a.begin,h=a.end;f<h;++f){e=c.insertAgentNeighbor(this.agents[f],e)}}else{var l=0,j=0,g=this.agentTree[a.left],k=this.agentTree[a.right];if(c.position[0]<g.minX){l+=RVO.sqr(g.minX-c.position[0])}else{if(c.position[0]>g.maxX){l+=RVO.sqr(c.position[0]-g.maxX)}}if(c.position[1]<g.minY){l+=RVO.sqr(g.minY-c.position[1])}else{if(c.position[1]>g.maxY){l+=RVO.sqr(c.position[1]-g.maxY)}}if(c.position[0]<k.minX){j+=RVO.sqr(k.minX-c.position[0])}else{if(c.position[0]>k.maxX){j+=RVO.sqr(c.position[0]-k.maxX)}}if(c.position[1]<k.minY){j+=RVO.sqr(k.minY-c.position[1])}else{if(c.position[1]>k.maxY){j+=RVO.sqr(c.position[1]-k.maxY)}}if(l<j){if(l<d){e=this.queryAgentTreeRecursive(c,e,a.left);if(j<d){e=this.queryAgentTreeRecursive(c,e,a.right)}}}else{if(j<d){e=this.queryAgentTreeRecursive(c,e,a.right);if(l<d){e=this.queryAgentTreeRecursive(c,e,a.left)}}}}return e};RVO.KdTree.prototype.queryObstacleTreeRecursive=function(c,e,d){if(d==0){return}else{var a=d.obstacle,b=a.nextObstacle,f=RVO.Vector.leftOf(a.point,b.point,c.position),g=RVO.sqr(f)/RVO.Vector.absSq(RVO.Vector.subtract(b.point,a.point));this.queryObstacleTreeRecursive(c,e,f>=0?d.left:d.right);if(g<e){if(f<0){c.insertObstacleNeighbor(d.obstacle,e)}this.queryObstacleTreeRecursive(c,e,f>=0?d.right:d.left)}}};RVO.KdTree.prototype.queryVisibility=function(a,c,b){return this.queryVisibilityRecursive(a,c,b,this.obstacleTree)};RVO.KdTree.prototype.queryVisibilityRecursive=function(f,e,b,d){if(d.obstacleNo==-1){return true}else{var i=this.sim.obstacles[d.obstacleNo],a=RVO.Vector.leftOf(i.point1,i.point2,f),g=RVO.Vector.leftOf(i.point1,i.point2,e);if(a>=0&&g>=0){return this.queryVisibilityRecursive(f,e,b,d.left)}else{if(a<=0&&g<=0){return this.queryVisibilityRecursive(f,e,b,d.right)}else{var c=RVO.Vector.leftOf(f,e,i.point1),h=RVO.Vector.leftOf(f,e,i.point2),j=1/RVO.Vector.absSq(RVO.Vector.subtract(e,f));return c*h>=0&&RVO.sqr(c)*j>=RVO.sqr(b)&&RVO.sqr(h)*j>=RVO.sqr(b)&&this.queryVisibilityRecursive(f,e,b,d.left)&&this.queryVisibilityRecursive(f,e,b,d.right)}}}};RVO.KdTree.AgentTreeNode=function(){this.begin=0;this.end=0;this.minX=0;this.minY=0;this.maxX=0;this.maxY=0;this.left=0;this.right=0};RVO.KdTree.ObstacleTreeNode=function(){this.left=null;this.right=null;this.obstacle=0};var RVO=RVO||{};RVO.Obstacle=function(){this.isConvex=false;this.nextobstacle=0;this.point=[0,0];this.prevObstacle=0;this.unitDir=[0,0];this.id=0};var RVO=RVO||{};RVO.EPSILON=0.00001;RVO.agentDefaults={neighborDist:50,maxNeighbors:5,maxSpeed:1,radius:10,timeHorizon:10,velocity:[0,0]};RVO.sqr=function(b){return b*b};if(typeof define==="function"&&define.amd&&define.amd.RVO){define("RVO",[],function(){return RVO})}if(typeof module==="object"&&module.exports){module.exports=RVO}var RVO=RVO||{};RVO.Simulator=function(h,e,a,b,g,d,f,c){this.timeStep=h;this.agents=[];this.globalTime=0;this.obstacles=[];this.kdTree=new RVO.KdTree(this);this.agentDefaults={};this.agentDefaults.neighborDist=e||RVO.agentDefaults.neighborDist;this.agentDefaults.maxNeighbors=a||RVO.agentDefaults.maxNeighbors;this.agentDefaults.maxSpeed=f||RVO.agentDefaults.maxSpeed;this.agentDefaults.radius=d||RVO.agentDefaults.radius;this.agentDefaults.timeHorizon=b||RVO.agentdefaults.timeHorizon;this.agentDefaults.timeHorizonObst=g||RVO.agentDefaults.timeHorizonObst;this.agentDefaults.velocity=c||RVO.agentdefaults.velocity};RVO.Simulator.prototype.addAgent=function(g,f,b,h,c,a,i,e){var d=new RVO.Agent(this);d.position=g||this.agentDefaults.position;d.maxNeighbors=b||this.agentDefaults.maxNeighbors;d.maxSpeed=i||this.agentDefaults.maxSpeed;d.neighborDist=f||this.agentDefaults.neighborDist;d.radius=a||this.agentDefaults.radius;d.timeHorizon=h||this.agentDefaults.timeHorizon;d.timeHorizonObst=c||this.agentDefaults.timeHorizonObst;d.velocity=e||this.agentDefaults.velocity;d.id=this.agents.length;this.agents.push(d);return this.agents.length-1};RVO.Simulator.prototype.addObstacle=function(d){if(d.length<2){throw new Error("Obstacle created with less than two vertices")}var e=this.obstacles.length;for(var c=0,a=d.length;c<a;++c){var b=new RVO.Obstacle();b.point=d[c];if(c!=0){b.prevObstacle=this.obstacles[this.obstacles.length-1];b.prevObstacle.nextObstacle=b}if(c==d.length-1){b.nextObstacle=this.obstacles[e];b.nextObstacle.prevObstacle=b}b.unitDir=RVO.Vector.normalize(RVO.Vector.subtract(d[c==d.length-1?0:c+1],d[c]));if(d.length==2){b.isConvex=true}else{b.isConvex=(RVO.Vector.leftOf(d[c==0?d.length-1:c-1],d[c],d[c==d.length-1?0:c+1])>=0)}b.id=this.obstacles.length;this.obstacles.push(b)}return e};RVO.Simulator.prototype.processObstacles=function(){this.kdTree.buildObstacleTree()};RVO.Simulator.prototype.doStep=function(){this.kdTree.buildAgentTree();for(var b=0,a=this.agents.length;b<a;++b){this.agents[b].computeNeighbors();this.agents[b].computeNewVelocity()}for(var b=0,a=this.agents.length;b<a;++b){this.agents[b].update()}this.globalTime+=this.timeStep};var RVO=RVO||{};RVO.Vector={};RVO.Vector.invert=function(b){return[-b[0],-b[1]]};RVO.Vector.dotProduct=function(d,c){return d[0]*c[0]+d[1]*c[1]};RVO.Vector.multiply=function(d,c){return[d[0]*c,d[1]*c]};RVO.Vector.divide=function(d,c){return[d[0]/c,d[1]/c]};RVO.Vector.add=function(d,c){return[d[0]+c[0],d[1]+c[1]]};RVO.Vector.subtract=function(d,c){return[d[0]-c[0],d[1]-c[1]]};RVO.Vector.shift=function(d,c){d[0]+=c[0];d[1]+=c[1];return d};RVO.Vector.set=function(d,c){d[0]=c[0];d[1]=c[1];return d};RVO.Vector.abs=function(b){return Math.sqrt(RVO.Vector.dotProduct(b,b))};RVO.Vector.absSq=function(b){return RVO.Vector.dotProduct(b,b)};RVO.Vector.det=function(d,c){return d[0]*c[1]-d[1]*c[0]};RVO.Vector.normalize=function(b){return RVO.Vector.divide(b,RVO.Vector.abs(b))};RVO.Vector.leftOf=function(e,d,f){return RVO.Vector.det(RVO.Vector.subtract(e,f),RVO.Vector.subtract(d,e))};RVO.Vector.distSqPointLineSegment=function(e,d,h){var g=RVO.Vector.subtract(d,e),f=RVO.Vector.dotProduct(RVO.Vector.subtract(h,e),g)/RVO.Vector.absSq(g);if(f<0){return RVO.Vector.absSq(RVO.Vector.subtract(h,e))}else{if(f>1){return RVO.Vector.absSq(RVO.Vector.subtract(h,d))}else{return RVO.Vector.absSq(RVO.Vector.subtract(h,RVO.Vector.add(RVO.Vector.multiply(g,f),e)))}}};